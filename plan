import speech_recognition as sr
import re
from datetime import datetime, timedelta
import json
import os

recognizer = sr.Recognizer()

def get_voice_input():
    try:
        with sr.Microphone() as source:
            print("–°–∫–∞–∂–∏—Ç–µ –∑–∞–¥–∞—á—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–£—Ä–æ–∫ –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ, —Å—Ä–æ–∫ 20 –∏—é–Ω—è, –ø—Ä–∏–º–µ—Ä–Ω–æ 2 —á–∞—Å–∞') –∏–ª–∏ '—É–¥–∞–ª–∏—Ç—å [–∑–∞–¥–∞—á–∞]'...")
            recognizer.adjust_for_ambient_noise(source, duration=3)
            audio = recognizer.listen(source, timeout=15, phrase_time_limit=30)
            text = recognizer.recognize_google(audio, language="ru-RU")
            print(f"–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {text}")
            return text
    except (sr.WaitTimeoutError, sr.UnknownValueError, sr.RequestError):
        print("–û—à–∏–±–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞. –í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É –≤—Ä—É—á–Ω—É—é.")
    except KeyboardInterrupt:
        print("\n–ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.")
        return "–≥–æ—Ç–æ–≤–æ"

    return input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–¥–∞—á—É (–∏–ª–∏ '–≥–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è): ").strip()


def parse_task(text):
    if not text or text.lower() == "–≥–æ—Ç–æ–≤–æ":
        return None

    print(f"–ü–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞: {text}")

    if text.lower().startswith("—É–¥–∞–ª–∏—Ç—å"):
        return {"action": "delete", "task": text[len("—É–¥–∞–ª–∏—Ç—å"):].strip()}

    task_match = re.match(r"^(.*?)(?:,\s*—Å—Ä–æ–∫\s*|\s*–¥–æ\s*)?", text, re.IGNORECASE)
    deadline_match = re.search(
        r"(?:—Å—Ä–æ–∫|–¥–æ)\s*(\d{1,2}\s*(—è–Ω–≤–∞—Ä—è|—Ñ–µ–≤—Ä–∞–ª—è|–º–∞—Ä—Ç–∞|–∞–ø—Ä–µ–ª—è|–º–∞—è|–∏—é–Ω—è|–∏—é–ª—è|–∞–≤–≥—É—Å—Ç–∞|—Å–µ–Ω—Ç—è–±—Ä—è|–æ–∫—Ç—è–±—Ä—è|–Ω–æ—è–±—Ä—è|–¥–µ–∫–∞–±—Ä—è))",
        text, re.IGNORECASE)
    time_match = re.search(r"–ø—Ä–∏–º–µ—Ä–Ω–æ\s*([\d.,]+)\s*(?:—á–∞—Å–∞|—á–∞—Å–æ–≤|—á–∞—Å)", text, re.IGNORECASE)
    relative_match = re.search(r"(–∑–∞–≤—Ç—Ä–∞|—á–µ—Ä–µ–∑\s+(\d+)\s+–¥(–Ω—è|–Ω–µ–π|–µ–Ω—å))", text, re.IGNORECASE)

    task = task_match.group(1).strip() if task_match and task_match.group(1).strip() else text.split(",")[0].strip()
    deadline = None
    hours = float(time_match.group(1).replace(',', '.')) if time_match else 1.0

    if deadline_match:
        try:
            deadline = datetime.strptime(f"{deadline_match.group(1)} 2025", "%d %B %Y")
        except ValueError:
            deadline = None
    elif relative_match:
        if "–∑–∞–≤—Ç—Ä–∞" in relative_match.group(1).lower():
            deadline = datetime.now() + timedelta(days=1)
        elif relative_match.group(2):
            days = int(relative_match.group(2))
            deadline = datetime.now() + timedelta(days=days)

    return {
        "task": task,
        "deadline": deadline.strftime("%Y-%m-%d") if deadline else None,
        "estimated_hours": round(hours, 2)
    }


def save_tasks(tasks):
    with open("tasks.json", "w", encoding="utf-8") as f:
        json.dump([t for t in tasks if "action" not in t], f, ensure_ascii=False, indent=4)


def load_tasks():
    if os.path.exists("tasks.json"):
        with open("tasks.json", "r", encoding="utf-8") as f:
            return json.load(f)
    return []


def generate_daily_plan(tasks, today):
    plan = []
    today_str = today.strftime('%d %B').replace('January', '—è–Ω–≤–∞—Ä—è').replace('February', '—Ñ–µ–≤—Ä–∞–ª—è')\
        .replace('March', '–º–∞—Ä—Ç–∞').replace('April', '–∞–ø—Ä–µ–ª—è').replace('May', '–º–∞—è')\
        .replace('June', '–∏—é–Ω—è').replace('July', '–∏—é–ª—è').replace('August', '–∞–≤–≥—É—Å—Ç–∞')\
        .replace('September', '—Å–µ–Ω—Ç—è–±—Ä—è').replace('October', '–æ–∫—Ç—è–±—Ä—è')\
        .replace('November', '–Ω–æ—è–±—Ä—è').replace('December', '–¥–µ–∫–∞–±—Ä—è')

    for task in tasks:
        deadline_str = task.get("deadline")
        estimated = task.get("estimated_hours", 1.0)
        task_name = task.get("task", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

        if deadline_str:
            try:
                deadline = datetime.strptime(deadline_str, "%Y-%m-%d")
                days_left = (deadline - today).days
                if days_left < 0:
                    plan.append(f"{today_str}: {task_name}, {estimated} {get_hour_word(estimated)} (–ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ)")
                elif days_left == 0:
                    plan.append(f"{today_str}: {task_name}, {estimated} {get_hour_word(estimated)} (–¥–µ–¥–ª–∞–π–Ω —Å–µ–≥–æ–¥–Ω—è)")
                else:
                    hours_today = estimated / days_left
                    plan.append(f"{today_str}: {task_name}, {hours_today:.1f} {get_hour_word(hours_today)}")
            except Exception:
                plan.append(f"{today_str}: {task_name}, {estimated} {get_hour_word(estimated)}")
        else:
            plan.append(f"{today_str}: {task_name}, {estimated} {get_hour_word(estimated)}")

    return plan


def get_hour_word(hours):
    h = int(hours)
    if 11 <= h % 100 <= 14:
        return "—á–∞—Å–æ–≤"
    elif h % 10 == 1:
        return "—á–∞—Å"
    elif 2 <= h % 10 <= 4:
        return "—á–∞—Å–∞"
    else:
        return "—á–∞—Å–æ–≤"


def main():
    tasks = load_tasks()
    today = datetime.now()
    print("üìã –ì–æ–ª–æ—Å–æ–≤–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á\n(—Å–∫–∞–∂–∏—Ç–µ '–≥–æ—Ç–æ–≤–æ' –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è)\n")

    while True:
        text = get_voice_input()
        if not text or text.lower() == "–≥–æ—Ç–æ–≤–æ":
            break

        task = parse_task(text)
        if task:
            if "action" in task and task["action"] == "delete":
                name = task["task"].lower()
                before = len(tasks)
                tasks = [t for t in tasks if t.get("task", "").lower() != name]
                if len(tasks) < before:
                    print(f"‚úÖ –ó–∞–¥–∞—á–∞ '{name}' —É–¥–∞–ª–µ–Ω–∞.")
                else:
                    print(f"‚ö†Ô∏è –ó–∞–¥–∞—á–∞ '{name}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            else:
                if any(t["task"].lower() == task["task"].lower() for t in tasks):
                    print("‚ö†Ô∏è –¢–∞–∫–∞—è –∑–∞–¥–∞—á–∞ —É–∂–µ –µ—Å—Ç—å.")
                else:
                    tasks.append(task)
                    print("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
        save_tasks(tasks)

    if tasks:
        print("\nüóì –í–∞—à –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø–ª–∞–Ω:")
        tasks.sort(key=lambda t: t.get("deadline") or "9999-12-31")
        plan = generate_daily_plan(tasks, today)
        for line in plan:
            print(line)
    else:
        print("üì≠ –ó–∞–¥–∞—á –Ω–µ—Ç.")


if __name__ == "__main__":
    main()
